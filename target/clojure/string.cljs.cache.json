["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$reverse","~$replace"]],"~:name","~$clojure.string","~:imports",["^ ","~$StringBuffer","~$goog.string.StringBuffer"],"~:requires",["^ ","~$gstring","~$goog.string","^>","^>","^:","^;"],"~:uses",null,"~:defs",["^ ","~$ends-with?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","~:line",281,"~:column",16,"~:end-line",281,"~:end-column",26,"~:tag","~$boolean","~:arglists",["~#list",["~$quote",["^L",[["~$s","~$substr"]]]]],"~:doc","True if s ends with substr."],"^7","~$clojure.string/ends-with?","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",26,"~:method-params",["^L",[["~$s","^N"]]],"~:protocol-impl",null,"~:arglists-meta",["^L",[null,null]],"^F",1,"~:variadic?",false,"^E",281,"~:ret-tag","^J","^G",281,"~:max-fixed-arity",2,"^I","^J","~:fn-var",true,"^K",["^L",["^M",["^L",[["~$s","^N"]]]]],"^O","True if s ends with substr."],"~$seq-reverse",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",14,"^F",8,"^G",14,"^H",19,"~:private",true,"^K",["^L",["^M",["^L",[["~$coll"]]]]]],"^Y",true,"^7","~$clojure.string/seq-reverse","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",19,"^Q",["^L",[["^Z"]]],"^R",null,"^S",["^L",[null,null]],"^F",1,"^T",false,"^E",14,"^U",["^4",[null,"~$any"]],"^G",14,"^V",1,"^W",true,"^K",["^L",["^M",["^L",[["^Z"]]]]]],"~$replace-with",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",36,"^F",8,"^G",36,"^H",20,"^Y",true,"^K",["^L",["^M",["^L",[["~$f"]]]]]],"^Y",true,"^7","~$clojure.string/replace-with","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",20,"^Q",["^L",[["~$f"]]],"^R",null,"^S",["^L",[null,null]],"^F",1,"^T",false,"^E",36,"^U","~$function","^G",36,"^V",1,"^W",true,"^K",["^L",["^M",["^L",[["~$f"]]]]]],"~$capitalize",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",129,"^F",15,"^G",129,"^H",25,"^I","~$string","^K",["^L",["^M",["^L",[["~$s"]]]]],"^O","Converts first character of the string to upper-case, all other\n  characters to lower-case."],"^7","~$clojure.string/capitalize","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",25,"^Q",["^L",[["~$s"]]],"^R",null,"^S",["^L",[null,null]],"^F",1,"^T",false,"^E",129,"^U","^15","^G",129,"^V",1,"^I","^15","^W",true,"^K",["^L",["^M",["^L",[["~$s"]]]]],"^O","Converts first character of the string to upper-case, all other\n  characters to lower-case."],"^5",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",21,"^F",15,"^G",21,"^H",22,"^I","^15","^K",["^L",["^M",["^L",[["~$s"]]]]],"^O","Returns s with its characters reversed."],"^7","~$clojure.string/reverse","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",22,"^Q",["^L",[["~$s"]]],"^R",null,"^S",["^L",[null,null]],"^F",1,"^T",false,"^E",21,"^U","^15","^G",21,"^V",1,"^I","^15","^W",true,"^K",["^L",["^M",["^L",[["~$s"]]]]],"^O","Returns s with its characters reversed."],"~$join",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",100,"^F",7,"^G",100,"^H",11,"^K",["^L",["^M",["^L",[["^Z"],["~$separator","^Z"]]]]],"^O","Returns a string of all elements in coll, as returned by (seq coll),\n  separated by an optional separator.","~:top-fn",["^ ","^T",false,"~:fixed-arity",2,"^V",2,"^Q",[["^Z"],["^19","^Z"]],"^K",["^L",[["^Z"],["^19","^Z"]]],"^S",["^L",[null,null]]]],"^7","~$clojure.string/join","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",11,"^1:",["^ ","^T",false,"^1;",2,"^V",2,"^Q",[["^Z"],["^19","^Z"]],"^K",["^L",[["^Z"],["^19","^Z"]]],"^S",["^L",[null,null]]],"^Q",[["^Z"],["^19","^Z"]],"^R",null,"^1;",2,"^S",["^L",[null,null]],"^F",1,"^T",false,"~:methods",[["^ ","^1;",1,"^T",false,"^I","^15"],["^ ","^1;",2,"^T",false,"^I","^15"]],"^E",100,"^G",100,"^V",2,"^W",true,"^K",["^L",[["^Z"],["^19","^Z"]]],"^O","Returns a string of all elements in coll, as returned by (seq coll),\n  separated by an optional separator."],"~$replace-first",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",76,"^F",15,"^G",76,"^H",28,"^I","^15","^K",["^L",["^M",["^L",[["~$s","~$match","~$replacement"]]]]],"^O","Replaces the first instance of match with replacement in s.\n\n   match/replacement can be:\n\n   string / string\n   pattern / (string or function of match).\n\n   See also replace.\n\n   The replacement is literal (i.e. none of its characters are treated\n   specially) for all cases above except pattern / string.\n\n   For pattern / string, $1, $2, etc. in the replacement string are\n   substituted with the string that matched the corresponding\n   parenthesized group in the pattern.\n\n   Example:\n   (clojure.string/replace-first \"swap first two words\"\n                                 #\"(\\w+)(\\s+)(\\w+)\" \"$3$2$1\")\n   -> \"first swap two words\""],"^7","~$clojure.string/replace-first","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",28,"^Q",["^L",[["~$s","^1?","^1@"]]],"^R",null,"^S",["^L",[null,null]],"^F",1,"^T",false,"^E",76,"^U","^15","^G",76,"^V",3,"^I","^15","^W",true,"^K",["^L",["^M",["^L",[["~$s","^1?","^1@"]]]]],"^O","Replaces the first instance of match with replacement in s.\n\n   match/replacement can be:\n\n   string / string\n   pattern / (string or function of match).\n\n   See also replace.\n\n   The replacement is literal (i.e. none of its characters are treated\n   specially) for all cases above except pattern / string.\n\n   For pattern / string, $1, $2, etc. in the replacement string are\n   substituted with the string that matched the corresponding\n   parenthesized group in the pattern.\n\n   Example:\n   (clojure.string/replace-first \"swap first two words\"\n                                 #\"(\\w+)(\\s+)(\\w+)\" \"$3$2$1\")\n   -> \"first swap two words\""],"~$starts-with?",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",276,"^F",16,"^G",276,"^H",28,"^I","^J","^K",["^L",["^M",["^L",[["~$s","^N"]]]]],"^O","True if s starts with substr."],"^7","~$clojure.string/starts-with?","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",28,"^Q",["^L",[["~$s","^N"]]],"^R",null,"^S",["^L",[null,null]],"^F",1,"^T",false,"^E",276,"^U","^J","^G",276,"^V",2,"^I","^J","^W",true,"^K",["^L",["^M",["^L",[["~$s","^N"]]]]],"^O","True if s starts with substr."],"~$escape",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",229,"^F",15,"^G",229,"^H",21,"^I","^15","^K",["^L",["^M",["^L",[["~$s","~$cmap"]]]]],"^O","Return a new string, using cmap to escape each character ch\n   from s as follows:\n\n   If (cmap ch) is nil, append ch to the new string.\n   If (cmap ch) is non-nil, append (str (cmap ch)) instead."],"^7","~$clojure.string/escape","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",21,"^Q",["^L",[["~$s","^1E"]]],"^R",null,"^S",["^L",[null,null]],"^F",1,"^T",false,"^E",229,"^U","^15","^G",229,"^V",2,"^I","^15","^W",true,"^K",["^L",["^M",["^L",[["~$s","^1E"]]]]],"^O","Return a new string, using cmap to escape each character ch\n   from s as follows:\n\n   If (cmap ch) is nil, append ch to the new string.\n   If (cmap ch) is non-nil, append (str (cmap ch)) instead."],"~$replace-all",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",27,"^F",8,"^G",27,"^H",19,"^Y",true,"^K",["^L",["^M",["^L",[["~$s","~$re","^1@"]]]]]],"^Y",true,"^7","~$clojure.string/replace-all","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",19,"^Q",["^L",[["~$s","^1H","^1@"]]],"^R",null,"^S",["^L",[null,null]],"^F",1,"^T",false,"^E",27,"^U","^10","^G",27,"^V",3,"^W",true,"^K",["^L",["^M",["^L",[["~$s","^1H","^1@"]]]]]],"~$discard-trailing-if-needed",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",151,"^F",8,"^G",151,"^H",34,"^Y",true,"^K",["^L",["^M",["^L",[["~$limit","~$v"]]]]]],"^Y",true,"^7","~$clojure.string/discard-trailing-if-needed","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",34,"^Q",["^L",[["^1K","~$v"]]],"^R",null,"^S",["^L",[null,null]],"^F",1,"^T",false,"^E",151,"^U",["^4",[null,"^10"]],"^G",151,"^V",2,"^W",true,"^K",["^L",["^M",["^L",[["^1K","~$v"]]]]]],"~$last-index-of",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",262,"^F",7,"^G",262,"^H",20,"^K",["^L",["^M",["^L",[["~$s","~$value"],["~$s","^1N","~$from-index"]]]]],"^O","Return last index of value (string or char) in s, optionally\n  searching backward from from-index or nil if not found.","^1:",["^ ","^T",false,"^1;",3,"^V",3,"^Q",[["~$s","^1N"],["~$s","^1N","^1O"]],"^K",["^L",[["~$s","^1N"],["~$s","^1N","^1O"]]],"^S",["^L",[null,null]]]],"^7","~$clojure.string/last-index-of","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",20,"^1:",["^ ","^T",false,"^1;",3,"^V",3,"^Q",[["~$s","^1N"],["~$s","^1N","^1O"]],"^K",["^L",[["~$s","^1N"],["~$s","^1N","^1O"]]],"^S",["^L",[null,null]]],"^Q",[["~$s","^1N"],["~$s","^1N","^1O"]],"^R",null,"^1;",3,"^S",["^L",[null,null]],"^F",1,"^T",false,"^1=",[["^ ","^1;",2,"^T",false,"^I",["^4",["^10","~$clj-nil"]]],["^ ","^1;",3,"^T",false,"^I",["^4",["^10","^1Q"]]]],"^E",262,"^G",262,"^V",3,"^W",true,"^K",["^L",[["~$s","^1N"],["~$s","^1N","^1O"]]],"^O","Return last index of value (string or char) in s, optionally\n  searching backward from from-index or nil if not found."],"~$pop-last-while-empty",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",144,"^F",8,"^G",144,"^H",28,"^Y",true,"^K",["^L",["^M",["^L",[["~$v"]]]]]],"^Y",true,"^7","~$clojure.string/pop-last-while-empty","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",28,"^Q",["^L",[["~$v"]]],"^R",null,"^S",["^L",[null,null]],"^F",1,"^T",false,"^E",144,"^G",144,"^V",1,"^W",true,"^K",["^L",["^M",["^L",[["~$v"]]]]]],"~$includes?",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",286,"^F",16,"^G",286,"^H",25,"^I","^J","^K",["^L",["^M",["^L",[["~$s","^N"]]]]],"^O","True if s includes substr."],"^7","~$clojure.string/includes?","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",25,"^Q",["^L",[["~$s","^N"]]],"^R",null,"^S",["^L",[null,null]],"^F",1,"^T",false,"^E",286,"^U","^J","^G",286,"^V",2,"^I","^J","^W",true,"^K",["^L",["^M",["^L",[["~$s","^N"]]]]],"^O","True if s includes substr."],"^6",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",44,"^F",15,"^G",44,"^H",22,"^I","^15","^K",["^L",["^M",["^L",[["~$s","^1?","^1@"]]]]],"^O","Replaces all instance of match with replacement in s.\n\n   match/replacement can be:\n\n   string / string\n   pattern / (string or function of match).\n\n   See also replace-first.\n\n   The replacement is literal (i.e. none of its characters are treated\n   specially) for all cases above except pattern / string.\n\n   For pattern / string, $1, $2, etc. in the replacement string are\n   substituted with the string that matched the corresponding\n   parenthesized group in the pattern.\n\n   Example:\n   (clojure.string/replace \"Almost Pig Latin\" #\"\\b(\\w)(\\w+)\\b\" \"$2$1ay\")\n   -> \"lmostAay igPay atinLay\""],"^7","~$clojure.string/replace","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",22,"^Q",["^L",[["~$s","^1?","^1@"]]],"^R",null,"^S",["^L",[null,null]],"^F",1,"^T",false,"^E",44,"^U","^15","^G",44,"^V",3,"^I","^15","^W",true,"^K",["^L",["^M",["^L",[["~$s","^1?","^1@"]]]]],"^O","Replaces all instance of match with replacement in s.\n\n   match/replacement can be:\n\n   string / string\n   pattern / (string or function of match).\n\n   See also replace-first.\n\n   The replacement is literal (i.e. none of its characters are treated\n   specially) for all cases above except pattern / string.\n\n   For pattern / string, $1, $2, etc. in the replacement string are\n   substituted with the string that matched the corresponding\n   parenthesized group in the pattern.\n\n   Example:\n   (clojure.string/replace \"Almost Pig Latin\" #\"\\b(\\w)(\\w+)\\b\" \"$2$1ay\")\n   -> \"lmostAay igPay atinLay\""],"~$split-lines",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",191,"^F",7,"^G",191,"^H",18,"^K",["^L",["^M",["^L",[["~$s"]]]]],"^O","Splits s on \\n or \\r\\n."],"^7","~$clojure.string/split-lines","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",18,"^Q",["^L",[["~$s"]]],"^R",null,"^S",["^L",[null,null]],"^F",1,"^T",false,"^E",191,"^U","^10","^G",191,"^V",1,"^W",true,"^K",["^L",["^M",["^L",[["~$s"]]]]],"^O","Splits s on \\n or \\r\\n."],"~$lower-case",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",124,"^F",15,"^G",124,"^H",25,"^I","^15","^K",["^L",["^M",["^L",[["~$s"]]]]],"^O","Converts string to all lower-case."],"^7","~$clojure.string/lower-case","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",25,"^Q",["^L",[["~$s"]]],"^R",null,"^S",["^L",[null,null]],"^F",1,"^T",false,"^E",124,"^U","^15","^G",124,"^V",1,"^I","^15","^W",true,"^K",["^L",["^M",["^L",[["~$s"]]]]],"^O","Converts string to all lower-case."],"~$trim-newline",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",211,"^F",15,"^G",211,"^H",27,"^I","^15","^K",["^L",["^M",["^L",[["~$s"]]]]],"^O","Removes all trailing newline \\n or return \\r characters from\n  string.  Similar to Perl's chomp."],"^7","~$clojure.string/trim-newline","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",27,"^Q",["^L",[["~$s"]]],"^R",null,"^S",["^L",[null,null]],"^F",1,"^T",false,"^E",211,"^U","^15","^G",211,"^V",1,"^I","^15","^W",true,"^K",["^L",["^M",["^L",[["~$s"]]]]],"^O","Removes all trailing newline \\n or return \\r characters from\n  string.  Similar to Perl's chomp."],"~$upper-case",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",119,"^F",15,"^G",119,"^H",25,"^I","^15","^K",["^L",["^M",["^L",[["~$s"]]]]],"^O","Converts string to all upper-case."],"^7","~$clojure.string/upper-case","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",25,"^Q",["^L",[["~$s"]]],"^R",null,"^S",["^L",[null,null]],"^F",1,"^T",false,"^E",119,"^U","^15","^G",119,"^V",1,"^I","^15","^W",true,"^K",["^L",["^M",["^L",[["~$s"]]]]],"^O","Converts string to all upper-case."],"~$split",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",167,"^F",7,"^G",167,"^H",12,"^K",["^L",["^M",["^L",[["~$s","^1H"],["~$s","^1H","^1K"]]]]],"^O","Splits string on a regular expression. Optional argument limit is\n  the maximum number of splits. Not lazy. Returns vector of the splits.","^1:",["^ ","^T",false,"^1;",3,"^V",3,"^Q",[["~$s","^1H"],["~$s","^1H","^1K"]],"^K",["^L",[["~$s","^1H"],["~$s","^1H","^1K"]]],"^S",["^L",[null,null]]]],"^7","~$clojure.string/split","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",12,"^1:",["^ ","^T",false,"^1;",3,"^V",3,"^Q",[["~$s","^1H"],["~$s","^1H","^1K"]],"^K",["^L",[["~$s","^1H"],["~$s","^1H","^1K"]]],"^S",["^L",[null,null]]],"^Q",[["~$s","^1H"],["~$s","^1H","^1K"]],"^R",null,"^1;",3,"^S",["^L",[null,null]],"^F",1,"^T",false,"^1=",[["^ ","^1;",2,"^T",false,"^I","^10"],["^ ","^1;",3,"^T",false,"^I",["^4",[null,"^10"]]]],"^E",167,"^G",167,"^V",3,"^W",true,"^K",["^L",[["~$s","^1H"],["~$s","^1H","^1K"]]],"^O","Splits string on a regular expression. Optional argument limit is\n  the maximum number of splits. Not lazy. Returns vector of the splits."],"~$trimr",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",206,"^F",15,"^G",206,"^H",20,"^I","^15","^K",["^L",["^M",["^L",[["~$s"]]]]],"^O","Removes whitespace from the right side of string."],"^7","~$clojure.string/trimr","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",20,"^Q",["^L",[["~$s"]]],"^R",null,"^S",["^L",[null,null]],"^F",1,"^T",false,"^E",206,"^U","^15","^G",206,"^V",1,"^I","^15","^W",true,"^K",["^L",["^M",["^L",[["~$s"]]]]],"^O","Removes whitespace from the right side of string."],"~$index-of",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",248,"^F",7,"^G",248,"^H",15,"^K",["^L",["^M",["^L",[["~$s","^1N"],["~$s","^1N","^1O"]]]]],"^O","Return index of value (string or char) in s, optionally searching\n  forward from from-index or nil if not found.","^1:",["^ ","^T",false,"^1;",3,"^V",3,"^Q",[["~$s","^1N"],["~$s","^1N","^1O"]],"^K",["^L",[["~$s","^1N"],["~$s","^1N","^1O"]]],"^S",["^L",[null,null]]]],"^7","~$clojure.string/index-of","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",15,"^1:",["^ ","^T",false,"^1;",3,"^V",3,"^Q",[["~$s","^1N"],["~$s","^1N","^1O"]],"^K",["^L",[["~$s","^1N"],["~$s","^1N","^1O"]]],"^S",["^L",[null,null]]],"^Q",[["~$s","^1N"],["~$s","^1N","^1O"]],"^R",null,"^1;",3,"^S",["^L",[null,null]],"^F",1,"^T",false,"^1=",[["^ ","^1;",2,"^T",false,"^I",["^4",["^10","^1Q"]]],["^ ","^1;",3,"^T",false,"^I",["^4",["^10","^1Q"]]]],"^E",248,"^G",248,"^V",3,"^W",true,"^K",["^L",[["~$s","^1N"],["~$s","^1N","^1O"]]],"^O","Return index of value (string or char) in s, optionally searching\n  forward from from-index or nil if not found."],"~$trim",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",196,"^F",15,"^G",196,"^H",19,"^I","^15","^K",["^L",["^M",["^L",[["~$s"]]]]],"^O","Removes whitespace from both ends of string."],"^7","~$clojure.string/trim","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",19,"^Q",["^L",[["~$s"]]],"^R",null,"^S",["^L",[null,null]],"^F",1,"^T",false,"^E",196,"^U","^15","^G",196,"^V",1,"^I","^15","^W",true,"^K",["^L",["^M",["^L",[["~$s"]]]]],"^O","Removes whitespace from both ends of string."],"~$triml",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",201,"^F",15,"^G",201,"^H",20,"^I","^15","^K",["^L",["^M",["^L",[["~$s"]]]]],"^O","Removes whitespace from the left side of string."],"^7","~$clojure.string/triml","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",20,"^Q",["^L",[["~$s"]]],"^R",null,"^S",["^L",[null,null]],"^F",1,"^T",false,"^E",201,"^U","^15","^G",201,"^V",1,"^I","^15","^W",true,"^K",["^L",["^M",["^L",[["~$s"]]]]],"^O","Removes whitespace from the left side of string."],"~$blank?",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",224,"^F",16,"^G",224,"^H",22,"^I","^J","^K",["^L",["^M",["^L",[["~$s"]]]]],"^O","True is s is nil, empty, or contains only whitespace."],"^7","~$clojure.string/blank?","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",22,"^Q",["^L",[["~$s"]]],"^R",null,"^S",["^L",[null,null]],"^F",1,"^T",false,"^E",224,"^U","^J","^G",224,"^V",1,"^I","^J","^W",true,"^K",["^L",["^M",["^L",[["~$s"]]]]],"^O","True is s is nil, empty, or contains only whitespace."],"~$re-surrogate-pair",["^ ","^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",18,"^F",16,"^G",18,"^H",33,"^Y",true],"^Y",true,"^7","~$clojure.string/re-surrogate-pair","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",33,"^F",1,"^E",18,"^G",18,"^I","~$js/RegExp"],"~$split-with-empty-regex",["^ ","^B",null,"^C",["^ ","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^E",157,"^F",8,"^G",157,"^H",30,"^Y",true,"^K",["^L",["^M",["^L",[["~$s","^1K"]]]]]],"^Y",true,"^7","~$clojure.string/split-with-empty-regex","^D","/Users/heatherhaylett/.gitlibs/libs/org.clojure/clojurescript/00079768f9104b17f4130cd710a2f636e046cb07/src/main/cljs/clojure/string.cljs","^H",30,"^Q",["^L",[["~$s","^1K"]]],"^R",null,"^S",["^L",[null,null]],"^F",1,"^T",false,"^E",157,"^U","~$clj","^G",157,"^V",2,"^W",true,"^K",["^L",["^M",["^L",[["~$s","^1K"]]]]]]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:else"]],"~:order",["^2H"]],"^O",null]